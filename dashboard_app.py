import streamlit as st
import pandas as pd
import os

# Import our data utility function to fetch fresh data for charts
from data_utils import fetch_data

# --- Page Configuration ---
st.set_page_config(
    page_title="305 Crypto Forecast",
    page_icon="ðŸ“ˆ",
    layout="wide"
)

# --- Caching Function ---
# We use a caching mechanism to avoid re-downloading data on every interaction
@st.cache_data
def load_chart_data(ticker):
    """Fetches and caches the comprehensive data for a given ticker."""
    return fetch_data(ticker)

# --- Main Application ---
st.title("ðŸ“ˆ 305 Crypto Forecast Dashboard")
st.markdown("An automated forecasting and sentiment analysis system for major cryptocurrencies.")

# --- Load Forecast Data ---
# The dashboard reads the summary results generated by daily_runner.py
try:
    forecast_df = pd.read_csv('forecast_results.csv')
except FileNotFoundError:
    st.error("`forecast_results.csv` not found. Please run `python daily_runner.py` first to generate the forecast data.")
    st.stop()

# --- Sidebar for Coin Selection ---
st.sidebar.header("Dashboard Options")
selected_coin = st.sidebar.selectbox(
    "Select a Cryptocurrency",
    forecast_df['Coin'].unique()
)

# --- Display Forecast Summary Metrics ---
st.header(f"Today's Forecast for {selected_coin}")

# Filter the dataframe for the selected coin
coin_forecast = forecast_df[forecast_df['Coin'] == selected_coin].iloc[0]

col1, col2, col3, col4 = st.columns(4)
col1.metric("Actual Price", f"${coin_forecast['Actual_Price']:,.2f}")
col2.metric("Prophet Forecast", f"${coin_forecast['Prophet_Forecast']:,.2f}")
col3.metric("LSTM Forecast", f"${coin_forecast['LSTM_Forecast']:,.2f}")
col4.metric("Sentiment Score", f"${coin_forecast['Sentiment_Score']:.2f}")

# --- Load Comprehensive Data for Charts ---
chart_data = load_chart_data(selected_coin)

if chart_data.empty:
    st.warning(f"Could not load chart data for {selected_coin}.")
else:
    # --- âœ… 1. Technical Indicator Visualizations ---
    st.header("Technical Indicators")

    # Price chart with Moving Averages and Bollinger Bands
    st.subheader("Price, Moving Averages, & Bollinger Bands")
    st.line_chart(chart_data[['Close', 'SMA', 'EMA', 'BB_High', 'BB_Low']])
    st.info(
        """
        - **SMA (Simple Moving Average):** The average price over a specified period, used to identify trend direction.
        - **EMA (Exponential Moving Average):** Similar to SMA, but gives more weight to recent prices, making it more responsive to new information.
        - **Bollinger Bands:** A measure of volatility. The price is considered high when it touches the upper band and low when it touches the lower band.
        """
    )

    # Create two columns for the next set of charts
    tech_col1, tech_col2 = st.columns(2)

    with tech_col1:
        st.subheader("RSI")
        st.line_chart(chart_data['RSI'])
        st.markdown("""
        *The RSI measures momentum on a scale of 0 to 100. Values **above 70** may indicate an asset is overbought, while values **below 30** may indicate it is oversold.*
        """)
        
        st.subheader("Stochastic Oscillator")
        st.line_chart(chart_data[['Stoch_k', 'Stoch_d']])
        st.markdown("""
        *This momentum indicator compares a closing price to its price range over a period. Like RSI, it's used to identify overbought and oversold conditions.*
        """)

    with tech_col2:
        st.subheader("MACD")
        st.line_chart(chart_data[['MACD', 'MACD_Signal']])
        st.markdown("""
        *The MACD shows the relationship between two moving averages. The **MACD line crossing above the Signal line** is often seen as a bullish signal, and vice versa.*
        """)
        
        st.subheader("On-Balance Volume (OBV)")
        st.line_chart(chart_data['OBV'])
        st.markdown("""
        *OBV uses volume flow to predict price changes. A rising OBV reflects positive volume pressure that can lead to higher prices.*
        """)

    st.subheader("Ichimoku Cloud")
    st.line_chart(chart_data[['Ichimoku_a', 'Ichimoku_b', 'Close']])
    st.markdown("""
    *A collection of indicators showing support/resistance and momentum. When the price is above the cloud, the trend is bullish; when below, it's bearish.*
    - **Ichimoku A (Senkou Span A):** The faster-moving leading span that forms one edge of the "cloud".
    - **Ichimoku B (Senkou Span B):** The slower-moving leading span that forms the other edge of the "cloud".
    """)


    # --- âœ… 2. On-Chain Indicator Visualizations (Simulated) ---
    st.header("On-Chain Indicators (Simulated)")
    st.info(
        """
        On-chain indicators provide insight into the health and activity of a blockchain network. These values are simulated for demonstration purposes.
        - **Active Addresses:** The number of unique addresses participating in transactions, indicating user engagement.
        - **Transaction Volume:** The total value of transactions, showing economic throughput.
        - **TVL (Total Value Locked):** The amount of assets staked in DeFi protocols, representing ecosystem health.
        - **Realized PnL:** The net profit or loss of all coins moved on-chain, indicating market sentiment.
        """
    )
    onchain_col1, onchain_col2 = st.columns(2)

    with onchain_col1:
        st.subheader("Active Addresses")
        st.bar_chart(chart_data['Active_Addresses'])
        
        st.subheader("Total Value Locked (TVL)")
        st.area_chart(chart_data['TVL'])

    with onchain_col2:
        st.subheader("Transaction Volume")
        st.bar_chart(chart_data['Transaction_Volume'])
        
        st.subheader("Realized PnL")
        st.area_chart(chart_data['Realized_PnL'])


    # --- âœ… 3. Fundamental Indicator Visualizations (Simulated) ---
    st.header("Fundamental Indicators (Simulated)")
    st.info(
        """
        Fundamental indicators assess the intrinsic value of a project based on its design, team, and market position. Scores are rated on a scale of 1 to 10.
        """
    )
    
    # Display the latest fundamental scores as metrics
    latest_fundamentals = chart_data.iloc[-1]
    fund_col1, fund_col2, fund_col3, fund_col4, fund_col5 = st.columns(5)
    
    fund_col1.metric("Token Utility", f"{latest_fundamentals['Token_Utility']:.1f}")
    fund_col2.metric("Adoption Rate", f"{latest_fundamentals['Adoption_Rate']:.1f}")
    fund_col3.metric("Team Score", f"{latest_fundamentals['Team_Score']:.1f}")
    fund_col4.metric("Tokenomics", f"{latest_fundamentals['Tokenomics_Score']:.1f}")
    fund_col5.metric("Regulatory Risk", f"{latest_fundamentals['Regulatory_Risk']:.1f}", delta_color="inverse")


# --- Display Full Forecast Table ---
st.header("Full Forecast Summary")
st.dataframe(forecast_df)

st.sidebar.markdown("---")
st.sidebar.info("This dashboard is for educational purposes only and is not financial advice.")
